which(df[a,] = 'NA')
which(df[a,1:100] = 'NA')
df[c(91:100),]
df[c(91:100),c(3:5)]
df[c(91:100),c(3,5)]
df[order(df$a)]
df[order(df$a),]
df[order(df$a,df$b),]
df[order(df$a,-df$b),]
df[order(df$a,-df$b),]
library(datasets)
library(datasets)
library(help=datasets)
USArrests
a<-USArrests
a
df
a
a[a$1]
a[a$2]
a[a$Murder]
a[a$Murder,]
a[a$Murder,]
a[a$Murder,3]
a[a$Murder,4]
a[a$Murder,1]
a[a$Murder,0]
a[order(a$Murder)]
a[order(a$Murder),]
sorted<-a[order(a$Murder),]
numberofrows<-(nrow(sorted)*0.25)
numberofrows
sorted(c(1:round(sorted)))
sorted(c(1:round(numberofrows)))
sorted[c(1:round(numberofrows))]
sorted[c(1:round(numberofrows)),]
which (a$Assault > 200 | a$Rape > 20)
a[which (a$Assault > 200 | a$Rape > 20),]
set.seed(100)
df1 = data.frame(studentId = c(1:10),Subjects=sample(c("Maths","English","Science"),10,Replace="F"))
df1 = data.frame(studentId = c(1:10),Subjects=sample(c("Maths","English","Science"),10,Replace=True))
df1 = data.frame(studentId = c(1:10),Subjects=sample(c("Maths","English","Science"),10))
df1 = data.frame(studentId = c(1:10),Subjects=sample(c("Maths","English","Science"),10,replace="T"))
df1 = data.frame(studentId = c(1:10),Subjects=sample(c("Maths","English","Science"),10,replace=TRUE))
df1
df2 = data.frame(studentId = c(2,4,6,8,10),Subjects=sample(c("Maths","English","Science"),10,replace=TRUE))
df2
df2 = data.frame(studentId = c(2,4,6,8,10),Sports=sample(c("Tennis","Football","Baseball"),10,replace=TRUE))
df2
df2 = data.frame(studentname = c(2,4,6,8,10),Sports=sample(c("Tennis","Football","Baseball"),10,replace=TRUE))
df2 = data.frame(studentName = c(2,4,6,8,10),Sports=sample(c("Tennis","Football","Baseball"),10,replace=TRUE))
merge(df1,df2,by.x="studentId",by.y="studentName")
df2 = data.frame(studentName = c(2,4,6,8,10),Sports=sample(c("Tennis","Football","Baseball"),5,replace=TRUE))
merge(df1,df2,by.x="studentId",by.y="studentName")
merge(df1,df2,by.x="studentId",by.y="studentName",all=T)
merge(df1,df2,by.x="studentId",by.y="studentName",all.y=T)
merge(df1,df2,by.x="studentId",by.y="studentName",all.x=T)
ChickWeight
summary(ChickWeight$Chick)
colnames(ChickWeight)
aggregate (weight~Diet, data=ChickWeight,FUN = mean)
summary(ChickWeight$Diet)
aggregate (weight~Diet, data=ChickWeight,FUN = sum)
aggregate (weight~Diet, data=ChickWeight,FUN = length)
aggregate (weight~Diet + Chick, data=ChickWeight,FUN = mean)
table(ChickWeight$weight)
table(ChickWeight$Diet)
library(reshape2)
install.packages(reshape2)
install.packages("reshape2"")
library(reshape2)
install.packages("reshape2")
install.packages("reshape2")
library(reshape2)
library(reshape2)
install.packages("reshape2")
install.packages("reshape2")
library(reshape2)
dcast(ChickWeight, Chick ~ Diet, value.var = "weight")
?write.csv (ChickWeight)
write.csv (ChickWeight)
?write.csv (ChickWeight)
getwd()
write.csv (ChickWeight, File="chickweight")
write.csv (ChickWeight, File="chickweight.csv",sep=",")
write.csv (ChickWeight, file="chickweight.csv",sep=",")
write.csv (ChickWeight, file="chickweight.csv")
dcast(ChickWeight, Chick ~ Diet, value.var = "weight")
dcast(ChickWeight, Chick ~ Diet, sum,value.var = "weight")
ChickWeight(which(ChickWeight$Chick == 18 & ChickWeight$Diet = 1))
ChickWeight(which(ChickWeight$Chick == 18 & ChickWeight$Diet == 1))
ChickWeight[which(ChickWeight$Chick == 18 & ChickWeight$Diet == 1)),]
ChickWeight[which(ChickWeight$Chick == 18 & ChickWeight$Diet == 1),]
head(french_fries)
melted <- melt (french_fries, id = 1:4, na.rm = T)
head(melted)
head(melted,200)
library(plyr)
library(reshape2)
library(plyr)
library(plyr)
colnames(melted)
dcast (melted, treatment + rep ~ time, length, subset=.(variable="potato"))
dcast (melted, treatment + rep ~ time, length, subset=.(variable="potato"))
dcast (melted, treatment + rep ~ time, length, subset=.(variable=="potato"))
mtcars
mtcars$names <- "Names"
rownames(mtcars) <- NULL
mtcars
mtcars
mtcars$names <- rownames
rownames(mtcars) <- NULL
mtcars
load(mtcars)
.rs.restartR()
mtcars
data(mtcars)
data(mtcars)
mtcars
mtcars$names <- rownames
rownames(mtcars) <- NULL
mtcars
mtcars
data(mtcars)
mtcars
mtcars
mtcars$names <- rownames(mtcars)
rownames(mtcars) <- NULL
mtcars
mtcars
mtcars.x <- mtcars[,("names","cyl")]
mtcars.x <- mtcars[,c("names","cyl")]
mtcars
colnames(mtcars)
mtcars.x <- mtcars[,c("names","cyl")]
mtcars.y <- mtcars[sample(1:nrow(mtcars),10),c("names","mpg")]
mtcars.y
?merge
merge(mtcars.x, mtcars.y, by.x = "names", by.y = "names")
df1 = data.frame(studentId = c(1:10),Subjects=sample(c("Maths","English","Science"),10,replace=TRUE))
df1
df2 = data.frame(studentName = c(2,4,6,8,10),Sports=sample(c("Tennis","Football","Baseball"),5,replace=TRUE))
df2
merge(df1,df2,by.x="studentId",by.y="studentName")
merge(df1,df2,by.x="studentId",by.y="studentName",all=T)
merge(df1,df2,by.x="studentId",by.y="studentName",all.x=T)
merge(mtcars.x, mtcars.y, by.x = "names", by.y = "names")
mtcars.y
merge(mtcars.x, mtcars.y, by.x = "names", by.y = "names")
mtcars.y
mtcars.x
merge(mtcars.x, mtcars.y, by.x = "names", by.y = "names",all.x=T)
merge(mtcars.x, mtcars.y, by.x = "names", by.y = "names",all=T)
merge(mtcars.x, mtcars.y, by.x = "names", by.y = "names",all.x=T)
merge(mtcars.x, mtcars.y, by.x = "names", by.y = "names",all.y=T)
attenu
colnames(attenu)
?aggregate()
aggregate(dist ~ event , data = attenu , FUN=mean)
which(attenu$event == 2)
attenu[,which(attenu$event == 2)]
attenu[,which(attenu$event == 2)]
attenu[which(attenu$event == 2),]
mean(attenu[which(attenu$event == 2),])
mean(attenu[which(attenu$event == 2),dist])
mean(attenu[which(attenu$event == 2),"dist"dist""])
mean(attenu[which(attenu$event == 2),"dist"])
?table()
marley
morley
colnames(morley)
table(morley, rows = "Expt", Columns = "Run", Value = "Speed", FUN="SUM")
?dcast
dcast(morley, Expt ! Run, Fun=sum, value.var = "Speed")
dcast(morley, Expt ~ Run, Fun=sum, value.var = "Speed")
library(reshape2)
dcast(morley, Expt ~ Run, Fun=sum, value.var = "Speed")
airquality
dcast (airquality, Day ~ Month, value.var = "Temp", Fun=sum)
colnames(mtcars)
dcast (airquality, Day ~ Month, value.var = "Temp", Fun=sum)
head(airquality)
dcast (airquality, Day ~ Month, value.var = "Temp", Fun=sum)
?airquality
airquality
install.packages(lubridate)
install.packages("lubridate"")
install.packages("lubridate")
install.packages("lubridate")
install.packages("stringr")
install.packages("stringr")
install.packages("devtools")
install_github("hadley/readr")
library("lubridate")
library("stringr")
library("devtools")
install_github("hadley/readr")
mat1 <- matrix( sample(1:1000,30,replace=F))
mat1 <- matrix( sample(1:1000,30,replace=F),col=2)
mat1
mat1 <- matrix( sample(1:1000,30,replace=F),col=2)
mat1 <- matrix( sample(1:1000,30,replace=F),ncol=2)
mat1
df1<-data.frame(mat1)
df1
numeric_vec <- numeric(nrow(df))
numeric_vec <- numeric(nrow(df1))
numeric_vec
c(1:nrow(df1))
min_rec
for (i in c(1:nrow(df1))){
min_rec <- min(df1,)
min_rec
}
for (i in c(1:nrow(df1))){
min_rec <- min(df1[i,])
min_rec
}
for (i in c(1:nrow(df1))){
min_rec <- min(df1[i,])
}
i
min_rec
df1
i=1
min_rec
for (i in c(1:nrow(df1))){
min_rec <- min(df1[i,])
print(min_rec)
}
for (i in c(1:nrow(df1))){
min_rec <- min(df1[i,])
numeric_vec[i] <- min_rec
}
numeric_vec[1]
system_time (for (i in c(1:nrow(df1))){
min_rec <- min(df1[i,])
numeric_vec[i] <- min_rec
})
system.time (for (i in c(1:nrow(df1))){
min_rec <- min(df1[i,])
numeric_vec[i] <- min_rec
})
mat1 <- matrix( sample(1:1000,800,replace=F),ncol=2)
df1<-data.frame(mat1)
numeric_vec <- numeric(nrow(df1))
system.time (for (i in c(1:nrow(df1))){
min_rec <- min(df1[i,])
numeric_vec[i] <- min_rec
})
mat1 <- matrix( sample(1:10000,500,replace=F),ncol=2)
df1<-data.frame(mat1)
numeric_vec <- numeric(nrow(df1))
system.time (for (i in c(1:nrow(df1))){
min_rec <- min(df1[i,])
numeric_vec[i] <- min_rec
})
mat1 <- matrix( sample(1:10000,500,replace=F),ncol=2)
df1<-data.frame(mat1)
numeric_vec <- numeric(nrow(df1))
system.time (for (i in c(1:nrow(df1))){
min_rec <- min(df1[i,])
numeric_vec[i] <- min_rec
})
system.time (for (i in c(1:nrow(df1))){
min_rec <- min(df1[i,])
numeric_vec[i] <- min_rec
})
mat1 <- matrix( sample(1:1000,50000,replace=F),ncol=2)
df1<-data.frame(mat1)
numeric_vec <- numeric(nrow(df1))
system.time (for (i in c(1:nrow(df1))){
min_rec <- min(df1[i,])
numeric_vec[i] <- min_rec
})
mat1 <- matrix( sample(1:1000,50000,replace=T),ncol=2)
df1<-data.frame(mat1)
numeric_vec <- numeric(nrow(df1))
system.time (for (i in c(1:nrow(df1))){
min_rec <- min(df1[i,])
numeric_vec[i] <- min_rec
})
apply(df1,1,FUN=min)
a<-apply(df1,1,FUN=min)
system.time(a<-apply(df1,1,FUN=min))
mat1 <- matrix( sample(1:1000,5000000,replace=T),ncol=2)
df1<-data.frame(mat1)
numeric_vec <- numeric(nrow(df1))
system.time(a<-apply(df1,1,FUN=min))
?apply
iris
irissquare(x) <- function (x){
return (x[1]^2 + x[2]^2 + x[3]^2 + x[4]^2)
}
irissquare <- function (x){
return (x[1]^2 + x[2]^2 + x[3]^2 + x[4]^2)
}
apply(iris,1,irissquare)
return (x[5]^2 + x[2]^2 + x[3]^2 + x[4]^2)
irissquare <- function (x){
return (x[5]^2 + x[2]^2 + x[3]^2 + x[4]^2)
}
apply(iris,1,irissquare)
head(iris)
apply(iris[,c(1:4)],1,irissquare)
apply(iris[,c(1:4)],1,FUN=irissquare(x))
apply(iris[,c(1:4)],1,FUN=irissquare)
iris[,c(1:4)]
irissquare <- function (x){
return (x[1]^2 + x[2]^2 + x[3]^2 + x[4]^2)
}
apply(iris[,c(1:4)],1,FUN=irissquare)
install.packages(DAAGtxtras)
library(DAAGxtras)
install.packages("RCurl")
install.packages("XML")
library(‘RCurl’)
library("RCurl")
library("XML")
Capacity = getURL("GET https://rmsautomotive.visualstudio.com/DefaultCollection/RMS/CAP%20%Invincible/_apis/work/TeamSettings/Iterations/17.05.B/Capacities?api-version=1.0-preview.2")
Capacity = getURL("https://rmsautomotive.visualstudio.com/DefaultCollection/RMS/CAP%20%Invincible/_apis/work/TeamSettings/Iterations/17.05.B/Capacities?api-version=1.0-preview.2")
Capacity
Capacity = getURL("https://rmsautomotive.visualstudio.com/DefaultCollection/RMS/CAP%20%Invincible/_apis/work/TeamSettings/Iterations/17.05.B/Capacities?api-version=1.0-preview.1")
Capacity
Capacity = getURL("https://rmsautomotive.visualstudio.com/DefaultCollection/RMS/CAP Invincible/_apis/work/TeamSettings/Iterations/17.05.B/Capacities?api-version=1.0-preview.1")
Capacity
Capacity = getURL("https://rmsautomotive.visualstudio.com/DefaultCollection/RMS/Warriors/_apis/work/TeamSettings/Iterations/17.05.B/Capacities?api-version=1.0-preview.1")
Capacity
Capacity = getURL("https://rmsautomotive.visualstudio.com/DefaultCollection/RMS/Warriors/_apis/work/TeamSettings/Iterations/17.05.B/Capacities?api-version=2.2")
Capacity
Capacity = getURL("https://rmsautomotive.visualstudio.com/DefaultCollection/RMS/Warriors/_apis/work/TeamSettings/Iterations/17.05.B/Capacities?api-version=2.2")
Capacity
pnorm(77,74,13)
1 - pnorm(77,74,(13/sqrt(36)))
77 + 1.96*(13/sqrt(36))
77 - 1.96*(13/sqrt(36))
z = 1.96*(48.5/sqrt(14))
z
77 + 1.96*(48.5/sqrt(14))
77 + 1.96*(48.5/sqrt(14))
77 -  1.96*(48.5/sqrt(14))
157.1428571+ 1.96*(48.5/sqrt(14))
157.1428571-  1.96*(48.5/sqrt(14))
setwd ("c:/veera/R/P")
library(ggplot2)
library(stringr)
v2015q3 = read.csv( 'I485_performancedata_fy2015_qtr3.csv')
v2015q4 = read.csv( 'I485_performancedata_fy2015_qtr4.csv')
v2016q1 = read.csv( 'I485_performancedata_fy2016_qtr1.csv')
v2016q2 = read.csv( 'I485_performancedata_fy2016_qtr2.csv')
v2016q3 = read.csv( 'I485_performancedata_fy2016_qtr3.csv')
v2016q4 = read.csv( 'I485_performancedata_fy2016_qtr4.csv')
v2017q1 = read.csv( 'I485_performancedata_fy2017_qtr1.csv')
v2017q2 = read.csv( 'I485_performancedata_fy2017_qtr2.csv')
v2017q3 = read.csv( 'I485_performancedata_fy2017_qtr3.csv')
v2015q3$Year = '2015'
v2015q4$Year = '2015'
v2016q1$Year = '2016'
v2016q2$Year = '2016'
v2016q3$Year = '2016'
v2016q4$Year = '2016'
v2017q1$Year = '2017'
v2017q2$Year = '2017'
v2017q3$Year = '2017'
v2015q3$key = '2015q3Apr-Jun'
v2015q4$key = '2015q4Jul-Sep'
v2016q1$key = '2016q1Oct-Dec'
v2016q2$key = '2016q2Jan-Mar'
v2016q3$key = '2016q3Apr-Jun'
v2016q4$key = '2016q4Jul-Sep'
v2017q1$key = '2017q1Oct-Dec'
v2017q2$key = '2017q2Jan-Mar'
v2017q3$key = '2017q3Apr-Jun'
i485data = rbind ( v2015q3,
v2015q4,
v2016q1,
v2016q2,
v2016q3,
v2016q4,
v2017q1,
v2017q2,
v2017q3)
i485data$State = str_trim(i485data$State)
#remove commas
i485data$Applications.Received2 = gsub(",","",i485data$Applications.Received2)
#convert to numeric
i485data$Applications.Received2 = as.numeric(as.character(i485data$Applications.Received2))
#remove commas
i485data$Approved3 = gsub(",","",i485data$Approved3)
#convert to numeric
i485data$Approved3 = as.numeric(as.character(i485data$Approved3))
#remove commas
i485data$Denied4 = gsub(",","",i485data$Denied4)
#convert to numeric
i485data$Denied4 = as.numeric(as.character(i485data$Denied4))
#remove commas
i485data$Pending5 = gsub(",","",i485data$Pending5)
#convert to numeric
i485data$Pending5 = as.numeric(as.character(i485data$Pending5))
aggregate(Applications.Received2~State, data = i485data , FUN=sum)
i485data = subset(i485data, i485data$State=="Texas")
aggregate(Applications.Received2~Year, data = i485data , FUN=sum)
library(reshape2)
myvars = c("Applications.Received2","Denied4","Approved3","Pending5","Year")
i485 = i485data[myvars]
melteddata = melt(i485, id.vars = 'Year')
ggplot(melteddata, aes(x=Year, y=value, fill=variable)) + geom_bar(stat='identity')
ggplot(melteddata, aes(x=Year, y=value, fill=variable)) + geom_bar(stat='identity') +
geom_text(aes(label=value), size=4,position=position_stack(vjust=0.5))
melteddata
ggplot(melteddata, aes(x=Year, y=value, fill=variable)) + geom_bar(stat='identity') +
geom_text(aes(label=sum(value), size=4,position=position_stack(vjust=0.5))
melteddata = melt(i485, id.vars = 'Year')
ggplot(melteddata, aes(x=Year, y=value, fill=variable)) + geom_bar(stat='identity') +
geom_text(aes(label=sum(value), size=4,position=position_stack(vjust=0.5))
melteddata = melt(i485, id.vars = 'Year')
ggplot(melteddata, aes(x=Year, y=value, fill=variable)) + geom_bar(stat='identity') +
geom_text(aes(label=sum(value), size=4,position=position_stack(vjust=0.5))
melteddata = melt(i485, id.vars = 'Year')
ggplot(melteddata, aes(x=Year, y=value, fill=variable)) + geom_bar(stat='identity') +
geom_text(aes(label=sum(value)), size=4,position=position_stack(vjust=0.5))
melteddata
aggregate(melteddata~(melteddata$Year+melteddata$variable),melteddata,SUM)
aggregate(melteddata~(Year+variable),melteddata,SUM)
class(melteddata)
aggregate(value~(Year+variable),melteddata,SUM)
aggregate(value~(Year+variable),melteddata, length)
aggregate(value~(Year+variable),melteddata, FUN=sum )
melteddata = aggregate(value~(Year+variable),melteddata, FUN=sum )
ggplot(melteddata, aes(x=Year, y=value, fill=variable)) + geom_bar(stat='identity') +
geom_text(aes(label=value), size=4,position=position_stack(vjust=0.5))
ggplot(melteddata, aes(x=Year, y=value, fill=variable)) + geom_bar(stat='identity') +
geom_text(aes(label=value), size=2,position=position_stack(vjust=0.5))
ggplot(melteddata, aes(x=Year, y=value, fill=variable)) + geom_bar(stat='identity') +
geom_text(aes(label=value), size=3,position=position_stack(vjust=0.5))
v2017q3
i485data = subset(i485data, i485data$State=="Nebraska")
aggregate(Applications.Received2~Year, data = i485data , FUN=sum)
library(reshape2)
myvars = c("Applications.Received2","Denied4","Approved3","Pending5","Year")
i485 = i485data[myvars]
melteddata = melt(i485, id.vars = 'Year')
melteddata = aggregate(value~(Year+variable),melteddata, FUN=sum )
ggplot(melteddata, aes(x=Year, y=value, fill=variable)) + geom_bar(stat='identity') +
geom_text(aes(label=value), size=3,position=position_stack(vjust=0.5))
setwd ("c:/veera/R/P")
library(ggplot2)
library(stringr)
v2015q3 = read.csv( 'I485_performancedata_fy2015_qtr3.csv')
v2015q4 = read.csv( 'I485_performancedata_fy2015_qtr4.csv')
v2016q1 = read.csv( 'I485_performancedata_fy2016_qtr1.csv')
v2016q2 = read.csv( 'I485_performancedata_fy2016_qtr2.csv')
v2016q3 = read.csv( 'I485_performancedata_fy2016_qtr3.csv')
v2016q4 = read.csv( 'I485_performancedata_fy2016_qtr4.csv')
v2017q1 = read.csv( 'I485_performancedata_fy2017_qtr1.csv')
v2017q2 = read.csv( 'I485_performancedata_fy2017_qtr2.csv')
v2017q3 = read.csv( 'I485_performancedata_fy2017_qtr3.csv')
v2015q3$Year = '2015'
v2015q4$Year = '2015'
v2016q1$Year = '2016'
v2016q2$Year = '2016'
v2016q3$Year = '2016'
v2017q1$Year = '2017'
v2017q2$Year = '2017'
v2015q3$key = '2015q3Apr-Jun'
v2015q4$key = '2015q4Jul-Sep'
v2016q1$key = '2016q1Oct-Dec'
v2016q3$key = '2016q3Apr-Jun'
v2016q4$key = '2016q4Jul-Sep'
v2017q1$key = '2017q1Oct-Dec'
v2016q2$key = '2016q2Jan-Mar'
v2017q3$Year = '2017'
v2017q2$key = '2017q2Jan-Mar'
v2016q4$Year = '2016'
v2017q3$key = '2017q3Apr-Jun'
i485data = rbind ( v2015q3,
v2015q4,
v2016q1,
v2016q2,
v2016q3,
v2016q4,
v2017q1,
v2017q2,
v2017q3)
i485data$State = str_trim(i485data$State)
i485data$Applications.Received2 = gsub(",","",i485data$Applications.Received2)
i485data$Approved3 = gsub(",","",i485data$Approved3)
i485data$Applications.Received2 = as.numeric(as.character(i485data$Applications.Received2))
i485data$Approved3 = as.numeric(as.character(i485data$Approved3))
i485data$Denied4 = gsub(",","",i485data$Denied4)
i485data$Denied4 = as.numeric(as.character(i485data$Denied4))
i485data$Pending5 = gsub(",","",i485data$Pending5)
i485data$Pending5 = as.numeric(as.character(i485data$Pending5))
aggregate(Applications.Received2~State, data = i485data , FUN=sum)
i485dataTexas = subset(i485data, i485data$State=="Texas")
aggregate(Applications.Received2~Year, data = i485dataTexas , FUN=sum)
library(reshape2)
myvars = c("Applications.Received2","Denied4","Approved3","Pending5","Year")
i485 = i485dataTexas[myvars]
melteddata = melt(i485, id.vars = 'Year')
melteddata = aggregate(value~(Year+variable),melteddata, FUN=sum )
ggplot(melteddata, aes(x=Year, y=value, fill=variable)) + geom_bar(stat='identity') +
geom_text(aes(label=value), size=3,position=position_stack(vjust=0.5))
i485dataNebraska = subset(i485data, i485data$State=="Nebraska")
aggregate(Applications.Received2~Year, data = i485dataNebraska , FUN=sum)
library(reshape2)
myvars = c("Applications.Received2","Denied4","Approved3","Pending5","Year")
i485 = i485dataNebraska[myvars]
melteddata = melt(i485, id.vars = 'Year')
melteddata = aggregate(value~(Year+variable),melteddata, FUN=sum )
ggplot(melteddata, aes(x=Year, y=value, fill=variable)) + geom_bar(stat='identity') +
geom_text(aes(label=value), size=3,position=position_stack(vjust=0.5))
