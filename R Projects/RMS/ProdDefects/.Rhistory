library("plotly")
drawplot = function(df, Title)
{
plot_ly(df, x=~Date, y=~ParkedTime,type='scatter',mode='lines+markers') %>%
layout(title=Title,xaxis = list(title='Date'),yaxis= list(title='Occupancy Rate (mins)'))
}
ui = fluidPage(
#Inputs - Lot No
titlePanel(title = h1("Smart Car Parking Data Analysis", align="center")) ,
mainPanel(fluidRow(
selectInput("LotCode","Lot Codes",choices = Lots$LotCode,selected = "701"),
splitLayout(cellWidths = c("60%", "60%"), plotlyOutput("OverallOccRate"), plotlyOutput("LotWiseOccRate")),
tags$div(
HTML("<br><br><br>")
),
splitLayout(cellWidths = c("60%", "60%"), plotlyOutput("PaidTimedOccRate"), plotlyOutput("FreeTimedOccRate")),
tags$div(
HTML("<br><br><br>")
),
plotlyOutput("StreetWiseOccRate")
)
)
)
server = function(input,output){
library("ggplot2")
library("plotly")
#1
#Date
#Occupancy rate = total office minutes / total parked mins
ByDate = subset ( full , full$parkedtime > 2)
Q1.1 = aggregate((ByDate$parkedtime/ByDate$BayCount/480) ~ByDate$ParkedDate, data=ByDate, FUN=sum)
colnames(Q1.1) = c("Date","ParkedTime")
output$OverallOccRate = renderPlotly( { drawplot(Q1.1, "Overall Occupancy Rate") })
#2
#Date
#Lot
#Occupancy Rate
#reactive({input$LotCode})
browser()
output$LotWiseOccRate = renderPlotly( {
ByLot = subset ( full, full$LotNo == '701' & parkedtime > 2)
#data = reactive({input$LotCode})
Q1.2 = aggregate((ByLot$parkedtime/ByLot$BayCount/480) ~ ByLot$ParkedDate, data=ByLot, FUN=sum)
colnames(Q1.2) = c("Date","ParkedTime")
drawplot(Q1.2,"Occupancy Rate By Lot")
})
#3
#Date
#Street
#Occupancy Rate
ByOffStreet = subset ( full, full$SectorName == "Off Street" & parkedtime > 2)
Q1.3 = aggregate((ByOffStreet$parkedtime/ByOffStreet$BayCount/480) ~ByOffStreet$ParkedDate, data=ByLot, FUN=sum)
colnames(Q1.3) = c("Date","ParkedTime")
output$StreetWiseOccRate = renderPlotly( { drawplot(Q1.3, "Occupancy Rate By Street") })
#4
#Date
#Parking Type - On Street - Paid and Timed
#Occupancy Rate
ByPaidTimed = subset ( full, full$BayType.x %in% c("1P Voucher", "2P Voucher", "30m Voucher" , "4P", "8P") & parkedtime > 2)
Q1.4 = aggregate((ByPaidTimed$parkedtime/ByPaidTimed$BayCount/480) ~ByPaidTimed$ParkedDate, data=ByPaidTimed, FUN=sum)
colnames(Q1.4) = c("Date","ParkedTime")
output$PaidTimedOccRate = renderPlotly( {drawplot(Q1.4, "Occupancy Rate By Paid and Timed Bays") })
#5
#Date
#Parking Type - On Street - Free/Timed
#Occupancy Rate
ByFreeTimed = subset ( full, full$BayType.x %in% c("5Min Free", "15m Free", "30m Free" , "1P Free", "2P Free") & parkedtime > 2)
Q1.5 = aggregate((ByFreeTimed$parkedtime/ByFreeTimed$BayCount/480) ~ByFreeTimed$ParkedDate, data=ByFreeTimed, FUN=sum)
colnames(Q1.5) = c("Date","ParkedTime")
output$FreeTimedOccRate = renderPlotly( { drawplot(Q1.5, "Occupancy Rate By Free and Timed Bays") })
}
shinyApp(ui = ui, server = server)
library("shiny")
library("plotly")
drawplot = function(df, Title)
{
plot_ly(df, x=~Date, y=~ParkedTime,type='scatter',mode='lines+markers') %>%
layout(title=Title,xaxis = list(title='Date'),yaxis= list(title='Occupancy Rate (mins)'))
}
ui = fluidPage(
#Inputs - Lot No
titlePanel(title = h1("Smart Car Parking Data Analysis", align="center")) ,
mainPanel(fluidRow(
selectInput("LotCode","Lot Codes",choices = Lots$LotCode,selected = "701"),
splitLayout(cellWidths = c("60%", "60%"), plotlyOutput("OverallOccRate"), plotlyOutput("LotWiseOccRate")),
tags$div(
HTML("<br><br><br>")
),
splitLayout(cellWidths = c("60%", "60%"), plotlyOutput("PaidTimedOccRate"), plotlyOutput("FreeTimedOccRate")),
tags$div(
HTML("<br><br><br>")
),
plotlyOutput("StreetWiseOccRate")
)
)
)
server = function(input,output){
library("ggplot2")
library("plotly")
#1
#Date
#Occupancy rate = total office minutes / total parked mins
ByDate = subset ( full , full$parkedtime > 2)
Q1.1 = aggregate((ByDate$parkedtime/ByDate$BayCount/480) ~ByDate$ParkedDate, data=ByDate, FUN=sum)
colnames(Q1.1) = c("Date","ParkedTime")
output$OverallOccRate = renderPlotly( { drawplot(Q1.1, "Overall Occupancy Rate") })
#2
#Date
#Lot
#Occupancy Rate
#reactive({input$LotCode})
browser()
output$LotWiseOccRate = renderPlotly( {
ByLot = subset ( full, full$LotNo == '701' & parkedtime > 2)
#data = reactive({input$LotCode})
Q1.2 = aggregate((ByLot$parkedtime/ByLot$BayCount/480) ~ ByLot$ParkedDate, data=ByLot, FUN=sum)
colnames(Q1.2) = c("Date","ParkedTime")
drawplot(Q1.2,"Occupancy Rate By Lot")
})
#3
#Date
#Street
#Occupancy Rate
ByOffStreet = subset ( full, full$SectorName == "Off Street" & parkedtime > 2)
Q1.3 = aggregate((ByOffStreet$parkedtime/ByOffStreet$BayCount/480) ~ByOffStreet$ParkedDate, data=ByLot, FUN=sum)
colnames(Q1.3) = c("Date","ParkedTime")
output$StreetWiseOccRate = renderPlotly( { drawplot(Q1.3, "Occupancy Rate By Street") })
#4
#Date
#Parking Type - On Street - Paid and Timed
#Occupancy Rate
ByPaidTimed = subset ( full, full$BayType.x %in% c("1P Voucher", "2P Voucher", "30m Voucher" , "4P", "8P") & parkedtime > 2)
Q1.4 = aggregate((ByPaidTimed$parkedtime/ByPaidTimed$BayCount/480) ~ByPaidTimed$ParkedDate, data=ByPaidTimed, FUN=sum)
colnames(Q1.4) = c("Date","ParkedTime")
output$PaidTimedOccRate = renderPlotly( {drawplot(Q1.4, "Occupancy Rate By Paid and Timed Bays") })
#5
#Date
#Parking Type - On Street - Free/Timed
#Occupancy Rate
ByFreeTimed = subset ( full, full$BayType.x %in% c("5Min Free", "15m Free", "30m Free" , "1P Free", "2P Free") & parkedtime > 2)
Q1.5 = aggregate((ByFreeTimed$parkedtime/ByFreeTimed$BayCount/480) ~ByFreeTimed$ParkedDate, data=ByFreeTimed, FUN=sum)
colnames(Q1.5) = c("Date","ParkedTime")
output$FreeTimedOccRate = renderPlotly( { drawplot(Q1.5, "Occupancy Rate By Free and Timed Bays") })
}
shinyApp(ui = ui, server = server)
