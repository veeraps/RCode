{
ByPaidTimed = subset ( full, full$BayType.x %in% c("1P Voucher", "2P Voucher", "30m Voucher" , "4P", "8P") & parkedtime > 2)
myTitle = "Occupancy Rate By Paid and Timed Bays"
}
else
{
ByPaidTimed = subset ( full, full$BayType.x %in% c("5Min Free", "15m Free", "30m Free" , "1P Free", "2P Free") & parkedtime > 2)
myTitle = "Occupancy Rate By Free and Timed Bays"
}
Q1.4 = aggregate((ByPaidTimed$parkedtime/ByPaidTimed$BayCount/480) ~(ByPaidTimed$ParkedDate+ByPaidTimed$BayType.x), data=ByPaidTimed, FUN=sum)
colnames(Q1.4) = c("Date","BayType","ParkedTime")
drawplotWithSplit (Q1.4, myTitle,"BayType")
})
#Overstay - Q5
full$OverStayFlag = 0
full[full$parkedtime - full$MaxStayPeriod  > 10, "OverStayFlag"] = 1
Q5 = subset (full, OverStayFlag == 1)
Q5 = subset ( Q5, Q5$BayType.x %in% c("1P Voucher", "2P Voucher", "30m Voucher" , "4P", "8P") & Q5$parkedtime > 2)
output$FreeTimedOverStay = renderPlotly({
if ( input$PaidValue == "Paid" )
{
Q5 = subset ( Q5, Q5$BayType.x %in% c("1P Voucher", "2P Voucher", "30m Voucher" , "4P", "8P") & Q5$parkedtime > 2)
myTitle = "Occupancy Rate By Paid and Timed Bays"
}
else
{
Q5 = subset ( Q5, Q5$BayType.x %in% c("5Min Free", "15m Free", "30m Free" , "1P Free", "2P Free") & Q5$parkedtime > 2)
myTitle = "Red Overstay Hotspots"
}
Q5 = aggregate(OverStayFlag~LotName,data=Q5,FUN=length)
Q5 = head(Q5[order(Q5$OverStayFlag, decreasing= T),], n = 5)
Q5 = data.frame(as.character(Q5$LotName),Q5$OverStayFlag)
colnames(Q5) = c("LotName","TotalOverStay")
plot_ly(Q5, x=~LotName, y=~TotalOverStay,type='bar') %>%
layout(p, xaxis = list(categoryarray = ~TotalOverStay, categoryorder = "array", tickangle=45), margin = list(b=200))
})
}
shinyApp(ui = ui, server = server)
library("shiny")
library("plotly")
setwd("C:/Veera/R/SmartParking")
Lots = read.csv('Smart_Parking_Lots.csv')
drawplotWithSplit = function(df, Title, Splitby)
{
if (Splitby=="BayType")
{
plot_ly(df, x=~Date, y=~ParkedTime, split = ~BayType, type='scatter',mode='lines+markers') %>%
layout(title=Title,xaxis = list(title='Date',tickangle=45), margin = list(b=160),yaxis= list(title='Occupancy Rate (mins)'))
}
else if (Splitby == "StreetType")
{
plot_ly(df, x=~Date, y=~ParkedTime, split = ~SectorName, type='scatter',mode='lines+markers') %>%
layout(title=Title,xaxis = list(title='Date',tickangle=45), margin = list(b=160),yaxis= list(title='Occupancy Rate (mins)'))
}
}
ui = fluidPage(
#Inputs - Lot No
navbarPage(
title = "Smart Car Parking Data Analysis",
tabPanel(
"Occupancy Rate",
mainPanel(fluidRow(
selectInput("LotCode","Lot Codes",choices = Lots$LotCode,selected = "701"),
selectInput("PaidValue","Parking Type",choices = c("Paid","Free"),selected = "Paid"),
tags$div(
HTML("<br><br><br>")
),
splitLayout(cellWidths = c("60%", "60%"), plotlyOutput("OverallOccRate"), plotlyOutput("LotWiseOccRate")),
tags$div(
HTML("<br><br><br>")
),
plotlyOutput("PaidTimedOccRate"),
tags$div(
HTML("<br><br><br>")
),
plotlyOutput("StreetWiseOccRate")
)
)
),
tabPanel(
"Over Stays",
mainPanel((fluidRow(
selectInput("Paid","Parking Type",choices = c("Paid","Free"),selected = "Paid"),
tags$div(HTML("<br><br><br>")),
plotlyOutput("FreeTimedOverStay")
)
))
)
)
)
server = function(input,output){
library("ggplot2")
library("plotly")
setwd("C:/Veera/R/SmartParking/RShiny")
full = read.csv("q1.csv")
#1
#Date
#Occupancy rate = total office minutes / total parked mins
ByDate = subset ( full , full$parkedtime > 2)
Q1.1 = aggregate((ByDate$parkedtime/ByDate$BayCount/480) ~ByDate$ParkedDate, data=ByDate, FUN=sum)
colnames(Q1.1) = c("Date","ParkedTime")
output$OverallOccRate = renderPlotly( { drawplot(Q1.1, "Overall Occupancy Rate") })
#2
#Date
#Lot
#Occupancy Rate
ByLot = subset ( full, full$LotNo == '701' & parkedtime > 2)
output$LotWiseOccRate = renderPlotly( {
ByLot = subset ( full, full$LotNo == input$LotCode & parkedtime > 2)
#data = reactive({input$LotCode})
Q1.2 = aggregate((ByLot$parkedtime/ByLot$BayCount/480) ~ ByLot$ParkedDate, data=ByLot, FUN=sum)
colnames(Q1.2) = c("Date","ParkedTime")
drawplot(Q1.2,"Occupancy Rate By Lot")
})
#3
#Date
#Street
#Occupancy Rate
ByOffStreet = subset ( full, parkedtime > 2)
Q1.3 = aggregate((ByOffStreet$parkedtime/ByOffStreet$BayCount/480) ~(ByOffStreet$ParkedDate+ByOffStreet$SectorName), data=ByLot, FUN=sum)
colnames(Q1.3) = c("Date","SectorName","ParkedTime")
output$StreetWiseOccRate = renderPlotly( { drawplotWithSplit(Q1.3, "Occupancy Rate By Street","StreetType") })
#4
#Date
#Parking Type - On Street - Paid and Timed
#Occupancy Rate
ByPaidTimed = subset ( full, full$BayType.x %in% c("1P Voucher", "2P Voucher", "30m Voucher" , "4P", "8P") & parkedtime > 2)
output$PaidTimedOccRate = renderPlotly({
if ( input$PaidValue == "Paid" )
{
ByPaidTimed = subset ( full, full$BayType.x %in% c("1P Voucher", "2P Voucher", "30m Voucher" , "4P", "8P") & parkedtime > 2)
myTitle = "Occupancy Rate By Paid and Timed Bays"
}
else
{
ByPaidTimed = subset ( full, full$BayType.x %in% c("5Min Free", "15m Free", "30m Free" , "1P Free", "2P Free") & parkedtime > 2)
myTitle = "Occupancy Rate By Free and Timed Bays"
}
Q1.4 = aggregate((ByPaidTimed$parkedtime/ByPaidTimed$BayCount/480) ~(ByPaidTimed$ParkedDate+ByPaidTimed$BayType.x), data=ByPaidTimed, FUN=sum)
colnames(Q1.4) = c("Date","BayType","ParkedTime")
drawplotWithSplit (Q1.4, myTitle,"BayType")
})
#Overstay - Q5
full$OverStayFlag = 0
full[full$parkedtime - full$MaxStayPeriod  > 10, "OverStayFlag"] = 1
Q5 = subset (full, OverStayFlag == 1)
Q5 = subset ( Q5, Q5$BayType.x %in% c("1P Voucher", "2P Voucher", "30m Voucher" , "4P", "8P") & Q5$parkedtime > 2)
browser()
output$FreeTimedOverStay = renderPlotly({
if ( input$PaidValue == "Paid" )
{
Q5 = subset ( Q5, Q5$BayType.x %in% c("1P Voucher", "2P Voucher", "30m Voucher" , "4P", "8P") & Q5$parkedtime > 2)
myTitle = "Occupancy Rate By Paid and Timed Bays"
}
else
{
Q5 = subset ( Q5, Q5$BayType.x %in% c("5Min Free", "15m Free", "30m Free" , "1P Free", "2P Free") & Q5$parkedtime > 2)
myTitle = "Red Overstay Hotspots"
}
Q5 = aggregate(OverStayFlag~LotName,data=Q5,FUN=length)
Q5 = head(Q5[order(Q5$OverStayFlag, decreasing= T),], n = 5)
Q5 = data.frame(as.character(Q5$LotName),Q5$OverStayFlag)
colnames(Q5) = c("LotName","TotalOverStay")
plot_ly(Q5, x=~LotName, y=~TotalOverStay,type='bar') %>%
layout(p, xaxis = list(categoryarray = ~TotalOverStay, categoryorder = "array", tickangle=45), margin = list(b=200))
})
}
shinyApp(ui = ui, server = server)
drawplot = function(df, Title)
{
plot_ly(df, x=~Date, y=~ParkedTime,type='scatter',mode='lines+markers') %>%
layout(title=Title,xaxis = list(title='Date',tickangle=45), margin = list(b=160),yaxis= list(title='Occupancy Rate (mins)'))
}
library("shiny")
library("plotly")
setwd("C:/Veera/R/SmartParking")
Lots = read.csv('Smart_Parking_Lots.csv')
drawplot = function(df, Title)
{
plot_ly(df, x=~Date, y=~ParkedTime,type='scatter',mode='lines+markers') %>%
layout(title=Title,xaxis = list(title='Date',tickangle=45), margin = list(b=160),yaxis= list(title='Occupancy Rate (mins)'))
}
drawplotWithSplit = function(df, Title, Splitby)
{
if (Splitby=="BayType")
{
plot_ly(df, x=~Date, y=~ParkedTime, split = ~BayType, type='scatter',mode='lines+markers') %>%
layout(title=Title,xaxis = list(title='Date',tickangle=45), margin = list(b=160),yaxis= list(title='Occupancy Rate (mins)'))
}
else if (Splitby == "StreetType")
{
plot_ly(df, x=~Date, y=~ParkedTime, split = ~SectorName, type='scatter',mode='lines+markers') %>%
layout(title=Title,xaxis = list(title='Date',tickangle=45), margin = list(b=160),yaxis= list(title='Occupancy Rate (mins)'))
}
}
ui = fluidPage(
#Inputs - Lot No
navbarPage(
title = "Smart Car Parking Data Analysis",
tabPanel(
"Occupancy Rate",
mainPanel(fluidRow(
selectInput("LotCode","Lot Codes",choices = Lots$LotCode,selected = "701"),
selectInput("PaidValue","Parking Type",choices = c("Paid","Free"),selected = "Paid"),
tags$div(
HTML("<br><br><br>")
),
splitLayout(cellWidths = c("60%", "60%"), plotlyOutput("OverallOccRate"), plotlyOutput("LotWiseOccRate")),
tags$div(
HTML("<br><br><br>")
),
plotlyOutput("PaidTimedOccRate"),
tags$div(
HTML("<br><br><br>")
),
plotlyOutput("StreetWiseOccRate")
)
)
),
tabPanel(
"Over Stays",
mainPanel((fluidRow(
selectInput("Paid","Parking Type",choices = c("Paid","Free"),selected = "Paid"),
tags$div(HTML("<br><br><br>")),
plotlyOutput("FreeTimedOverStay")
)
))
)
)
)
server = function(input,output){
library("ggplot2")
library("plotly")
setwd("C:/Veera/R/SmartParking/RShiny")
full = read.csv("q1.csv")
#1
#Date
#Occupancy rate = total office minutes / total parked mins
ByDate = subset ( full , full$parkedtime > 2)
Q1.1 = aggregate((ByDate$parkedtime/ByDate$BayCount/480) ~ByDate$ParkedDate, data=ByDate, FUN=sum)
colnames(Q1.1) = c("Date","ParkedTime")
output$OverallOccRate = renderPlotly( { drawplot(Q1.1, "Overall Occupancy Rate") })
#2
#Date
#Lot
#Occupancy Rate
ByLot = subset ( full, full$LotNo == '701' & parkedtime > 2)
output$LotWiseOccRate = renderPlotly( {
ByLot = subset ( full, full$LotNo == input$LotCode & parkedtime > 2)
#data = reactive({input$LotCode})
Q1.2 = aggregate((ByLot$parkedtime/ByLot$BayCount/480) ~ ByLot$ParkedDate, data=ByLot, FUN=sum)
colnames(Q1.2) = c("Date","ParkedTime")
drawplot(Q1.2,"Occupancy Rate By Lot")
})
#3
#Date
#Street
#Occupancy Rate
ByOffStreet = subset ( full, parkedtime > 2)
Q1.3 = aggregate((ByOffStreet$parkedtime/ByOffStreet$BayCount/480) ~(ByOffStreet$ParkedDate+ByOffStreet$SectorName), data=ByLot, FUN=sum)
colnames(Q1.3) = c("Date","SectorName","ParkedTime")
output$StreetWiseOccRate = renderPlotly( { drawplotWithSplit(Q1.3, "Occupancy Rate By Street","StreetType") })
#4
#Date
#Parking Type - On Street - Paid and Timed
#Occupancy Rate
ByPaidTimed = subset ( full, full$BayType.x %in% c("1P Voucher", "2P Voucher", "30m Voucher" , "4P", "8P") & parkedtime > 2)
output$PaidTimedOccRate = renderPlotly({
if ( input$PaidValue == "Paid" )
{
ByPaidTimed = subset ( full, full$BayType.x %in% c("1P Voucher", "2P Voucher", "30m Voucher" , "4P", "8P") & parkedtime > 2)
myTitle = "Occupancy Rate By Paid and Timed Bays"
}
else
{
ByPaidTimed = subset ( full, full$BayType.x %in% c("5Min Free", "15m Free", "30m Free" , "1P Free", "2P Free") & parkedtime > 2)
myTitle = "Occupancy Rate By Free and Timed Bays"
}
Q1.4 = aggregate((ByPaidTimed$parkedtime/ByPaidTimed$BayCount/480) ~(ByPaidTimed$ParkedDate+ByPaidTimed$BayType.x), data=ByPaidTimed, FUN=sum)
colnames(Q1.4) = c("Date","BayType","ParkedTime")
drawplotWithSplit (Q1.4, myTitle,"BayType")
})
#Overstay - Q5
full$OverStayFlag = 0
full[full$parkedtime - full$MaxStayPeriod  > 10, "OverStayFlag"] = 1
Q5 = subset (full, OverStayFlag == 1)
Q5 = subset ( Q5, Q5$BayType.x %in% c("1P Voucher", "2P Voucher", "30m Voucher" , "4P", "8P") & Q5$parkedtime > 2)
browser()
output$FreeTimedOverStay = renderPlotly({
if ( input$PaidValue == "Paid" )
{
Q5 = subset ( Q5, Q5$BayType.x %in% c("1P Voucher", "2P Voucher", "30m Voucher" , "4P", "8P") & Q5$parkedtime > 2)
myTitle = "Occupancy Rate By Paid and Timed Bays"
}
else
{
Q5 = subset ( Q5, Q5$BayType.x %in% c("5Min Free", "15m Free", "30m Free" , "1P Free", "2P Free") & Q5$parkedtime > 2)
myTitle = "Red Overstay Hotspots"
}
Q5 = aggregate(OverStayFlag~LotName,data=Q5,FUN=length)
Q5 = head(Q5[order(Q5$OverStayFlag, decreasing= T),], n = 5)
Q5 = data.frame(as.character(Q5$LotName),Q5$OverStayFlag)
colnames(Q5) = c("LotName","TotalOverStay")
plot_ly(Q5, x=~LotName, y=~TotalOverStay,type='bar') %>%
layout(p, xaxis = list(categoryarray = ~TotalOverStay, categoryorder = "array", tickangle=45), margin = list(b=200))
})
}
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
runApp()
Q5 = subset ( Q5, Q5$BayType.x %in% c("1P Voucher", "2P Voucher", "30m Voucher" , "4P", "8P") & full$parkedtime > 2)
library("shiny")
library("plotly")
setwd("C:/Veera/R/SmartParking")
Lots = read.csv('Smart_Parking_Lots.csv')
setwd("C:/Veera/R/SmartParking/RShiny")
full = read.csv("q1.csv")
full$OverStayFlag = 0
full[full$parkedtime - full$MaxStayPeriod  > 10, "OverStayFlag"] = 1
Q5 = subset (full, OverStayFlag == 1)
Q5 = subset ( Q5, Q5$BayType.x %in% c("1P Voucher", "2P Voucher", "30m Voucher" , "4P", "8P") & full$parkedtime > 2)
Q5 = aggregate(OverStayFlag~LotName,data=Q5,FUN=length)
Q5 = head(Q5[order(Q5$OverStayFlag, decreasing= T),], n = 5)
Q5 = data.frame(as.character(Q5$LotName),Q5$OverStayFlag)
colnames(Q5) = c("LotName","TotalOverStay")
plot_ly(Q5, x=~LotName, y=~TotalOverStay,type='bar') %>%
layout(p, xaxis = list(categoryarray = ~TotalOverStay, categoryorder = "array"))
library("shiny")
library("plotly")
setwd("C:/Veera/R/SmartParking")
Lots = read.csv('Smart_Parking_Lots.csv')
setwd("C:/Veera/R/SmartParking/RShiny")
full = read.csv("q1.csv")
full$OverStayFlag = 0
full[full$parkedtime - full$MaxStayPeriod  > 10, "OverStayFlag"] = 1
Q5 = subset (full, OverStayFlag == 1)
Q5 = subset ( Q5, Q5$BayType.x %in% c("5Min Free", "15m Free", "30m Free" , "1P Free", "2P Free") & Q5$parkedtime > 2)
Q5 = aggregate(OverStayFlag~LotName,data=Q5,FUN=length)
Q5 = head(Q5[order(Q5$OverStayFlag, decreasing= T),], n = 5)
Q5 = data.frame(as.character(Q5$LotName),Q5$OverStayFlag)
colnames(Q5) = c("LotName","TotalOverStay")
plot_ly(Q5, x=~LotName, y=~TotalOverStay,type='bar') %>%
layout(p, xaxis = list(categoryarray = ~TotalOverStay, categoryorder = "array"))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
full = read.csv("q1.csv")
full$OverStayFlag = 0
full[full$parkedtime - full$MaxStayPeriod  > 10, "OverStayFlag"] = 1
Q5 = subset (full, OverStayFlag == 1)
full = read.csv("q1.csv")
full$OverStayFlag = 0
full[full$parkedtime - full$MaxStayPeriod  > 10, "OverStayFlag"] = 1
Q6 = subset (full, OverStayFlag == 1)
table(Q6$BayType.x)
full = read.csv("q1.csv")
full$OverStayFlag = 0
full[full$parkedtime - full$MaxStayPeriod  > 10, "OverStayFlag"] = 1
Q6 = subset (full, OverStayFlag == 1)
Q6 = aggregate(OverStayFlag~Baytype.x,data=Q6,FUN=length)
Q6 = head(Q6[order(Q6$OverStayFlag, decreasing= T),], n = 5)
Q6 = data.frame(as.character(Q6$LotName),Q6$OverStayFlag)
colnames(Q6) = c("LotName","TotalOverStay")
colnames(Q6) = c("Baytype","TotalOverStay")
plot_ly(Q6, x=~Baytype, y=~TotalOverStay,type='bar') %>%
layout(p, xaxis = list(categoryarray = ~TotalOverStay, categoryorder = "array"))
full = read.csv("q1.csv")
full$OverStayFlag = 0
full[full$parkedtime - full$MaxStayPeriod  > 10, "OverStayFlag"] = 1
Q6 = subset (full, OverStayFlag == 1)
Q6 = aggregate(OverStayFlag~Baytype.x,data=Q6,FUN=length)
Q6 = head(Q6[order(Q6$OverStayFlag, decreasing= T),], n = 5)
Q6 = data.frame(as.character(Q6$Baytype.x),Q6$OverStayFlag)
Q6
full = read.csv("q1.csv")
full$OverStayFlag = 0
full[full$parkedtime - full$MaxStayPeriod  > 10, "OverStayFlag"] = 1
Q6 = subset (full, OverStayFlag == 1)
Q6 = aggregate(OverStayFlag~BayType.x,data=Q6,FUN=length)
Q6 = head(Q6[order(Q6$OverStayFlag, decreasing= T),], n = 5)
Q6 = data.frame(as.character(Q6$BayType.x),Q6$OverStayFlag)
colnames(Q6) = c("Baytype","TotalOverStay")
plot_ly(Q6, x=~Baytype, y=~TotalOverStay,type='bar') %>%
layout(p, xaxis = list(categoryarray = ~TotalOverStay, categoryorder = "array"))
full$OverStayFlag = 0
full[full$parkedtime - full$MaxStayPeriod  > 10, "OverStayFlag"] = 1
Q6 = subset (full, OverStayFlag == 1)
Q6 = aggregate(OverStayFlag~BayType.x,data=Q6,FUN=length)
colnames(Q6) = c("Baytype","TotalOverStay")
Q6
colnames(Q6) = c("Baytype","TotalOverStay")
plot_ly(Q6, x=~Baytype, y=~TotalOverStay,type='bar') %>%
layout(p, xaxis = list(categoryarray = ~TotalOverStay, categoryorder = "array"))
Q6 = subset (full, OverStayFlag == 1)
Q6 = aggregate(OverStayFlag~BayType.x,data=Q6,FUN=length)
Q6 = Q6[order(Q6$OverStayFlag, decreasing= T),]
Q6 = data.frame(as.character(Q6$BayType.x),Q6$OverStayFlag)
colnames(Q6) = c("Baytype","TotalOverStay")
plot_ly(Q6, x=~Baytype, y=~TotalOverStay,type='bar') %>%
layout(p, xaxis = list(categoryarray = ~TotalOverStay, categoryorder = "array"))
plot_ly(Q6, x=~Baytype, y=~TotalOverStay,type='bar', color = "orange") %>%
layout(p, xaxis = list(categoryarray = ~TotalOverStay, categoryorder = "array"))
plot_ly(Q6, x=~Baytype, y=~TotalOverStay,type='bar', color =~BayType) %>%
layout(p, xaxis = list(categoryarray = ~TotalOverStay, categoryorder = "array"))
plot_ly(Q6, x=~Baytype, y=~TotalOverStay,type='bar', color=~BayType.x) %>%
layout(p, xaxis = list(categoryarray = ~TotalOverStay, categoryorder = "array"))
plot_ly(Q6, x=~Baytype, y=~TotalOverStay,type='bar', color="tomato") %>%
layout(p, xaxis = list(categoryarray = ~TotalOverStay, categoryorder = "array"))
plot_ly(Q6, x=~Baytype, y=~TotalOverStay,type='bar', color="magenta") %>%
layout(p, xaxis = list(categoryarray = ~TotalOverStay, categoryorder = "array"))
runApp()
runApp()
runApp()
runApp()
runApp()
full = read.csv("q1.csv")
full$OverStayFlag = 0
full[full$parkedtime - full$MaxStayPeriod  > 10, "OverStayFlag"] = 1
Q6 = subset (full, OverStayFlag == 1)
Q6 = aggregate(OverStayFlag~BayType.x,data=Q6,FUN=length)
Q6 = Q6[order(Q6$OverStayFlag, decreasing= T),]
Q6 = data.frame(as.character(Q6$BayType.x),Q6$OverStayFlag)
colnames(Q6) = c("Baytype","TotalOverStay")
plot_ly(Q6, x=~Baytype, y=~TotalOverStay,type='bar', color="darkmagenta") %>%
layout(p, xaxis = list(categoryarray = ~TotalOverStay, categoryorder = "array"))
plot_ly(Q6, x=~Baytype, y=~TotalOverStay,type='bar', colors="darkmagenta") %>%
layout(p, xaxis = list(categoryarray = ~TotalOverStay, categoryorder = "array"))
plot_ly(Q6, x=~Baytype, y=~TotalOverStay,type='bar', colors="orange") %>%
layout(p, xaxis = list(categoryarray = ~TotalOverStay, categoryorder = "array"))
plot_ly(Q6, x=~Baytype, y=~TotalOverStay,type='bar', color =c("red","blue","orange"), colors="orange") %>%
layout(p, xaxis = list(categoryarray = ~TotalOverStay, categoryorder = "array"))
plot_ly(Q6, x=~Baytype, y=~TotalOverStay,type='bar', color =c("red"), colors="orange") %>%
layout(p, xaxis = list(categoryarray = ~TotalOverStay, categoryorder = "array"))
plot_ly(Q6, x=~Baytype, y=~TotalOverStay,type='bar', color =c("red"), colors="red") %>%
layout(p, xaxis = list(categoryarray = ~TotalOverStay, categoryorder = "array"))
plot_ly(Q6, x=~Baytype, y=~TotalOverStay,type='bar', color =c("red"), colors="darkmagenta") %>%
layout(p, xaxis = list(categoryarray = ~TotalOverStay, categoryorder = "array"))
plot_ly(Q6, x=~Baytype, y=~TotalOverStay,type='bar', color =c(""), colors="darkmagenta") %>%
layout(p, xaxis = list(categoryarray = ~TotalOverStay, categoryorder = "array"))
runApp()
runApp()
full = read.csv("q1.csv")
full$OverStayFlag = 0
full[full$parkedtime - full$MaxStayPeriod  > 10, "OverStayFlag"] = 1
Q6 = subset (full, OverStayFlag == 1)
Q6 = aggregate(OverStayFlag~(BayType.x+LotName),data=Q6,FUN=length)
Q6
Q6 = Q6[order(Q6$OverStayFlag, decreasing= T),]
Q6 = data.frame(as.character(Q6$BayType.x),Q6$OverStayFlag)
colnames(Q6) = c("Baytype","LotName","TotalOverStay")
Q6 = subset (full, OverStayFlag == 1)
Q6 = aggregate(OverStayFlag~(BayType.x+LotName),data=Q6,FUN=length)
Q6 = Q6[order(Q6$OverStayFlag, decreasing= T),]
Q6 = data.frame(as.character(Q6$BayType.x),Q^$LotName,Q6$OverStayFlag)
colnames(Q6) = c("Baytype","LotName","TotalOverStay")
Q6 = subset (full, OverStayFlag == 1)
Q6 = aggregate(OverStayFlag~(BayType.x+LotName),data=Q6,FUN=length)
Q6 = Q6[order(Q6$OverStayFlag, decreasing= T),]
Q6 = data.frame(as.character(Q6$BayType.x),Q6$LotName,Q6$OverStayFlag)
colnames(Q6) = c("Baytype","LotName","TotalOverStay")
plot_ly(Q6, x=~Baytype, y=~TotalOverStay,type='bar', color =~LotName, colors="darkmagenta") %>%
layout(p, xaxis = list(categoryarray = ~TotalOverStay, categoryorder = "array"))
plot_ly(Q6, x=~Baytype, y=~TotalOverStay,type='bar', color =~LotName) %>%
layout(p, xaxis = list(categoryarray = ~TotalOverStay, categoryorder = "array"))
plot_ly(Q6, x=~LotName, y=~TotalOverStay,type='bar', color =~BayType) %>%
layout(p, xaxis = list(categoryarray = ~TotalOverStay, categoryorder = "array"))
plot_ly(Q6, x=~LotName, y=~TotalOverStay,type='bar', color =~Baytype) %>%
layout(p, xaxis = list(categoryarray = ~TotalOverStay, categoryorder = "array"))
plot_ly(Q6, x=~Baytype, y=~TotalOverStay,type='bar', color =~LotName) %>%
layout(p, xaxis = list(categoryarray = ~TotalOverStay, categoryorder = "array"))
str(full)
full$OverStayFlag = 0
full[full$parkedtime - full$MaxStayPeriod  > 10, "OverStayFlag"] = 1
Q6 = subset (full, OverStayFlag == 1)
Q6 = aggregate(OverStayFlag~(BayType.x+Street),data=Q6,FUN=length)
Q6 = Q6[order(Q6$OverStayFlag, decreasing= T),]
Q6 = data.frame(as.character(Q6$BayType.x),Q6$Street,Q6$OverStayFlag)
colnames(Q6) = c("Baytype","Street","TotalOverStay")
plot_ly(Q6, x=~Baytype, y=~TotalOverStay,type='bar', color =~Street) %>%
layout(p, xaxis = list(categoryarray = ~TotalOverStay, categoryorder = "array"))
plot_ly(Q6, x=~Baytype, y=~TotalOverStay,type='bar', color =~Street) %>%
layout(p, xaxis = list(categoryarray = ~TotalOverStay, categoryorder = "array"),barmode="stack")
plot_ly(Q6, x=~Baytype, y=~TotalOverStay,type='bar', color =~Street,colors="red") %>%
layout(p, xaxis = list(categoryarray = ~TotalOverStay, categoryorder = "array"),barmode="stack")
plot_ly(Q6, x=~Baytype, y=~TotalOverStay,type='bar', color =~Street,marker = list(color = 'rgb(55, 83, 109)')) %>%
layout(p, xaxis = list(categoryarray = ~TotalOverStay, categoryorder = "array"),barmode="stack")
plot_ly(Q6, x=~Baytype, y=~TotalOverStay,type='bar', color =~Street,marker = list(color = 'rgb(55, 83, 130)',color = 'rgb(55, 83, 109)')) %>%
layout(p, xaxis = list(categoryarray = ~TotalOverStay, categoryorder = "array"),barmode="stack")
plot_ly(Q6, x=~Baytype, y=~TotalOverStay,type='bar', color =~Street) %>%
layout(p, xaxis = list(categoryarray = ~TotalOverStay, categoryorder = "array"),barmode="stack")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
